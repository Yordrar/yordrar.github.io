<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Personal webpage</title>
    <link>http://yordrar.github.io/</link>
    <description>Recent content on Personal webpage</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 11 Jul 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://yordrar.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>test</title>
      <link>http://yordrar.github.io/blog/test/</link>
      <pubDate>Sat, 11 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>http://yordrar.github.io/blog/test/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Direct3D model viewer</title>
      <link>http://yordrar.github.io/portfolio/d3d_model_viewer/</link>
      <pubDate>Fri, 10 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>http://yordrar.github.io/portfolio/d3d_model_viewer/</guid>
      <description>This is a simple OBJ model viewer I made with DirectX 11 and Dear ImGui with the purpose of learning both of them.
It can load an OBJ mesh file and visualize it. You can also move the camera around in a Blender-like fashion. It can also visualize the vertex normals, as well as showing the mesh in wireframe or solid mode.
It is still not finished though, I plan to add some other features such ass different visualization options and shaders.</description>
    </item>
    
    <item>
      <title>C&#43;&#43; Ray tracer</title>
      <link>http://yordrar.github.io/portfolio/cplusplus_raytracer/</link>
      <pubDate>Mon, 06 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>http://yordrar.github.io/portfolio/cplusplus_raytracer/</guid>
      <description>This is a C++ ray tracer I developed for my Bachelor&amp;rsquo;s thesis. I developed it with the purpose of learning the foundations of computer graphics and ray tracing. Because of that, it uses no graphics API, only pure C++ 11.
It supports many rendering features, such as:
 Unbiased Monte Carlo integration of the Rendering Equation via Path tracing Global illumination Anti-aliasing Defocus blur with customizable aperture and focus distance Importance sampling via BRDF sampling Next event estimation with shadow rays Smooth and flat shading Diffuse, Crystal, Metal, Blinn-Phong and Emissive materials with parameterizable roughness, metallicity, reflectance and intensity Fresnel reflections in diffuse materials PBR materials with support for texture maps, normal maps, roughness/glosiness maps, metallicity maps and ambient occlusion maps Point lights, area lights, and directional lights Image-based Lightning with sphere mapping Support for importing multiple asset formats such as OBJ, FBX and PLY via the Assimp library.</description>
    </item>
    
  </channel>
</rss>