banner:
  title: Hi! Welcome to my personal website

social:
  twitter: yordrar
  linkedin: ja-hernandezc
  github: yordrar
  gitlab: ""
  facebook: ""
  instagram: ""
  gmail: juanantoniohernandezcanovas

about:
  enable: true
  content: Graphics programmer and computer science graduate
  button:
    btnText: about me
    URL: "/about"

skill:
  enable: true
  item:
    - title: C++
      logo: images/skills/cplusplus.png
      description: | 
        I mainly know C++11, although I'm learning newer versions of the language (C++14 and above).
        
        I've read the C++ creator's book (The C++ Programming Language, 4th Ed. by Bjarne Stroustrup) to learn the design decisions behind the language and its features.
        I've applied this knowledge to the project I made for my bachelor's thesis, which is a ray tracing renderer. You can find it in my [portfolio](/portfolio).
        
        I've also read the Gang of Four book (Design Patterns, Elements of Reusable Object-Oriented Software) and thus I know how to imlpement common software engineering patterns in this language.

        Among other features, I know:
          * The STL library and containers
          * Generics
          * Template metaprogramming
          * Threads and futures
          * Lambda functions
    - title: C#
      logo: images/skills/csharp.png
      description: | 
        I have used this language mainly with Unity.
        Apart from using it at university in a project I also used it in my internship as a game developer as we used Unity to develop games.

        My main source of knowledge has been the great documentation available at [Microsoft's site](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/).

        I know advanced features such as:
          * Properties
          * Events
          * Delegate methods
          * Coroutines
          * Attributes
          * Lambda expressions
          * Generics
          * Linq
    - title: Python
      logo: images/skills/python.png
      description: | 
        I use this language mainly for scripting, as it is very easy and quick to write small and useful utilities.

        I learned it mainly from reading the [documentation](https://docs.python.org/3/) of the language.

        I try to keep up with the latest features, such as:
          * Asyncronous programming with coroutines
          * Context managers
          * Decorators
          * Metaclasses
          * Generators
          * Assignment expressions
    - title: DirectX 11
      logo: images/skills/directx.png
      description: | 
        Although I'm a beginner with DirectX and HLSL, I know how to load meshes, render them with different types of shading and configure the stages of the pipeline.

        Right now I'm learning more advanced DirectX 11 features and implementing a lot of shader with different illumination algorithms.
    - title: Unity
      logo: images/skills/unity.png
      description: | 
        Because I used Unity both at university for a project and in my internship, I have pretty good knowledge of it.

        I know how to create, modify and unpack prefabs from code, create custom editor windows to aid in the development, draw custom gizmos in the editor and work in both 2D and 3D.
        I also know more advanced features such as shader programming (both in HLSL and shader graph) and creating custom render pipelines and render passes.

        To keep up to date with Unity, I read the changelog of every release and to keep learning I often go through the resources available in [Unity learn](https://learn.unity.com/).
    - title: Qt 5
      logo: images/skills/qt.png
      description: |
        I learned Qt at the same time I made my Bachelor's thesis with it.
        I know how to design interfaces with Qt Creator and access that design from C++ code.

        In my Bachelor's thesis, I used a variety of widgets, such as text fields, combo boxes, lines, buttons, labels, tab widgets, radio selectors, etc.
        I also used validators to reject invalid input from text fields.

        I also know how to configure a Qt project, add external libraries and the usage of qmake.

        To learn the basics of Qt and qmake I read the book Mastering Qt 5.
        From that I check the [official documentation](https://doc.qt.io/qt-5/reference-overview.html) while developing if I need to learn about something new or check usage and behavior.
    - title: Git
      logo: images/skills/git.png
      description: | 
        I always use Git for all my projects to log the changes of the code.

        I know how to commit, branch, merge, solve conflicts, rebase, checkout, squash and cherry pick.

        I also use Github as a portfolio and cloud backup of my projects.

education:
  enable: true
  item:
    - title: Bachelor's degree in Computer Science
      year: 2016 - 2020
      academy: University of Murcia
      image: images/education/umu.png
    - title: First Certificate in English (FCE)
      year: 2015
      academy: Cambridge ESOL Examinations
      image: images/education/fce.png

experience:
  enable: true
  item:
    - logo: images/experience/soab.png
      title: Game developer internship
      company: Sons of a Bit Entertainment, S.L.
      duration: February 2019 - April 2019

hackathons:
  enable: false

certifications:
  enable: false

leadership:
  enable: false